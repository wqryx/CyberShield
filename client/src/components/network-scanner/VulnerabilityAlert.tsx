import { AlertCircle, Shield, AlertTriangle } from "lucide-react";
import { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";

export interface Vulnerability {
  id: string;
  deviceIp: string;
  deviceName: string;
  description: string;
  severity: "high" | "medium" | "low";
  recommendation?: string;
}

interface VulnerabilityAlertProps {
  vulnerabilities: Vulnerability[];
  onViewDetails: () => void;
}

export function VulnerabilityAlert({ vulnerabilities, onViewDetails }: VulnerabilityAlertProps) {
  const [expandedVuln, setExpandedVuln] = useState<string | null>(null);
  
  if (vulnerabilities.length === 0) {
    return null;
  }

  // Get the count of vulnerabilities by severity
  const highCount = vulnerabilities.filter(v => v.severity === "high").length;
  const mediumCount = vulnerabilities.filter(v => v.severity === "medium").length;
  const lowCount = vulnerabilities.filter(v => v.severity === "low").length;

  const getBadgeColor = (severity: string) => {
    switch (severity) {
      case "high":
        return "bg-red-100 text-red-800 hover:bg-red-200";
      case "medium":
        return "bg-orange-100 text-orange-800 hover:bg-orange-200";
      case "low":
        return "bg-yellow-100 text-yellow-800 hover:bg-yellow-200";
      default:
        return "bg-gray-100 text-gray-800 hover:bg-gray-200";
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "high":
        return <AlertCircle className="h-4 w-4 text-red-500" />;
      case "medium":
        return <AlertTriangle className="h-4 w-4 text-orange-500" />;
      case "low":
        return <Shield className="h-4 w-4 text-yellow-500" />;
      default:
        return <Shield className="h-4 w-4 text-gray-500" />;
    }
  };

  return (
    <Card className="border border-red-200 bg-red-50 overflow-hidden">
      <div className="p-4 border-b border-red-200 bg-red-100">
        <div className="flex justify-between items-center">
          <div className="flex items-center">
            <AlertCircle className="h-5 w-5 text-red-500 mr-2" />
            <h3 className="text-base font-medium text-red-800">
              Vulnerabilidades de Seguridad Detectadas
            </h3>
          </div>
          <div className="flex space-x-2">
            {highCount > 0 && (
              <Badge variant="outline" className="bg-red-100 text-red-800 border-red-300">
                {highCount} Alta{highCount !== 1 ? 's' : ''}
              </Badge>
            )}
            {mediumCount > 0 && (
              <Badge variant="outline" className="bg-orange-100 text-orange-800 border-orange-300">
                {mediumCount} Media{mediumCount !== 1 ? 's' : ''}
              </Badge>
            )}
            {lowCount > 0 && (
              <Badge variant="outline" className="bg-yellow-100 text-yellow-800 border-yellow-300">
                {lowCount} Baja{lowCount !== 1 ? 's' : ''}
              </Badge>
            )}
          </div>
        </div>
      </div>
      
      <div className="p-4">
        <div className="space-y-3">
          {vulnerabilities.map((vulnerability) => (
            <div 
              key={vulnerability.id} 
              className={`border rounded-md overflow-hidden ${
                expandedVuln === vulnerability.id ? 'border-' + (
                  vulnerability.severity === 'high' ? 'red' : 
                  vulnerability.severity === 'medium' ? 'orange' : 'yellow'
                ) + '-300' : 'border-gray-200'
              }`}
            >
              <div 
                className={`p-3 flex justify-between items-center cursor-pointer ${
                  vulnerability.severity === 'high' ? 'bg-red-50' : 
                  vulnerability.severity === 'medium' ? 'bg-orange-50' : 'bg-yellow-50'
                }`}
                onClick={() => setExpandedVuln(expandedVuln === vulnerability.id ? null : vulnerability.id)}
              >
                <div className="flex items-center">
                  {getSeverityIcon(vulnerability.severity)}
                  <span className="ml-2 font-medium">
                    {vulnerability.deviceName} ({vulnerability.deviceIp})
                  </span>
                </div>
                <Badge className={getBadgeColor(vulnerability.severity)}>
                  {vulnerability.severity === 'high' ? 'Alto riesgo' : 
                   vulnerability.severity === 'medium' ? 'Riesgo medio' : 'Riesgo bajo'}
                </Badge>
              </div>
              
              {expandedVuln === vulnerability.id && (
                <div className="p-3 bg-white border-t border-gray-200">
                  <p className="text-sm text-gray-800 mb-2">
                    {vulnerability.description}
                  </p>
                  {vulnerability.recommendation && (
                    <div className="mt-3">
                      <h4 className="text-sm font-medium text-gray-700 mb-1">Recomendaci√≥n:</h4>
                      <p className="text-sm text-gray-600 bg-gray-50 p-2 rounded border border-gray-100">
                        {vulnerability.recommendation}
                      </p>
                    </div>
                  )}
                </div>
              )}
            </div>
          ))}
        </div>
        
        <div className="mt-4 flex justify-between items-center">
          <p className="text-sm text-gray-600">
            <span className="font-medium">{vulnerabilities.length}</span> {vulnerabilities.length === 1 ? 'vulnerabilidad' : 'vulnerabilidades'} detectada{vulnerabilities.length !== 1 ? 's' : ''} en tu red
          </p>
          <Button 
            variant="outline" 
            size="sm"
            className="border-red-300 text-red-700 hover:bg-red-50"
            onClick={onViewDetails}
          >
            Ver informe completo
          </Button>
        </div>
      </div>
    </Card>
  );
}
