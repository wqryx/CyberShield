import { describe, it, expect, vi } from 'vitest';
import { render, screen, fireEvent } from '@testing-library/react';
import { VulnerabilityAlert } from '@/components/network-scanner/VulnerabilityAlert';

describe('VulnerabilityAlert', () => {
  const vulnerabilidades = [
    {
      id: '1',
      deviceIp: '192.168.1.1',
      deviceName: 'Router-1',
      description: 'El router tiene el puerto Telnet (23) abierto, lo que representa un riesgo de seguridad.',
      severity: 'high',
      recommendation: 'Desactiva el puerto Telnet (23) y utiliza SSH (22) para acceso remoto seguro.'
    },
    {
      id: '2',
      deviceIp: '192.168.1.10',
      deviceName: 'PC-10',
      description: 'El dispositivo tiene compartición de archivos SMB potencialmente insegura.',
      severity: 'medium',
      recommendation: 'Actualiza a SMB versión 3.0 o superior y deshabilita las versiones antiguas.'
    }
  ] as const;

  it('debería mostrar la alerta de vulnerabilidades con la cantidad correcta', () => {
    const onViewDetails = vi.fn();
    render(
      <VulnerabilityAlert 
        vulnerabilities={vulnerabilidades} 
        onViewDetails={onViewDetails} 
      />
    );
    
    // Comprobar que muestra el título 
    expect(screen.getByText('Vulnerabilidades de Seguridad Detectadas')).toBeInTheDocument();
    
    // Comprobar que aparece el número correcto de vulnerabilidades
    expect(screen.getByText('2', { exact: false })).toBeInTheDocument();
    
    // Verificar que aparece al menos una de las vulnerabilidades
    expect(screen.getByText('Router-1', { exact: false })).toBeInTheDocument();
  });

  it('debería mostrar los badges de severidad por nivel de riesgo', () => {
    const onViewDetails = vi.fn();
    render(
      <VulnerabilityAlert 
        vulnerabilities={vulnerabilidades} 
        onViewDetails={onViewDetails} 
      />
    );
    
    // Verificar badges de riesgo alto y medio
    expect(screen.getByText('1 Alta')).toBeInTheDocument();
    expect(screen.getByText('1 Media')).toBeInTheDocument();
  });

  it('debería expandir los detalles al hacer clic en la vulnerabilidad', () => {
    const onViewDetails = vi.fn();
    render(
      <VulnerabilityAlert 
        vulnerabilities={vulnerabilidades} 
        onViewDetails={onViewDetails} 
      />
    );
    
    // Clic en la primera vulnerabilidad
    fireEvent.click(screen.getByText('Router-1', { exact: false }));
    
    // Verificar que ahora se muestra la recomendación
    expect(screen.getByText('Recomendación:', { exact: false })).toBeInTheDocument();
    expect(screen.getByText('Desactiva el puerto Telnet (23)', { exact: false })).toBeInTheDocument();
  });

  it('debería llamar a onViewDetails al hacer clic en el botón de informe', () => {
    const onViewDetails = vi.fn();
    render(
      <VulnerabilityAlert 
        vulnerabilities={vulnerabilidades} 
        onViewDetails={onViewDetails} 
      />
    );
    
    // Clic en el botón de ver informe completo
    fireEvent.click(screen.getByText('Ver informe completo'));
    
    // Verificar que se llamó al callback
    expect(onViewDetails).toHaveBeenCalledTimes(1);
  });

  it('no debería renderizar nada si no hay vulnerabilidades', () => {
    const onViewDetails = vi.fn();
    const { container } = render(
      <VulnerabilityAlert 
        vulnerabilities={[]} 
        onViewDetails={onViewDetails} 
      />
    );
    
    // Verificar que no se renderiza nada
    expect(container.firstChild).toBeNull();
  });
});